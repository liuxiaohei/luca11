package org.ld.pojo.example;

import org.apache.ibatis.session.SqlSession;
import org.ld.mapper.ConfigPropertiesMapper;
import org.ld.pojo.ConfigProperties;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

public class ConfigPropertiesExample {
    protected String orderByClause;

    protected boolean distinct;

    protected List<Criteria> oredCriteria;

    /**
     * This field was generated by JoinPlugin
     * Name of the database table represented by this class
     */
    public static final String TABLE = "config_properties";

    /**
     * This field was generated by JoinPlugin
     * SQL query alias of the database table represented by this class
     */
    public static final String ALIAS = "config_properties";

    /**
     * This field was generated by JoinPlugin
     * SQL query alias of the database table represented by this class
     */
    public static final String ALIASparam = "config_properties.";

    private List<String> from;

    private String sumCol;

    protected Integer offset;

    protected Integer rows;

    public ConfigPropertiesExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    public ConfigPropertiesExample setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
        return this;
    }

    public String getOrderByClause() {
        return orderByClause;
    }

    public ConfigPropertiesExample setDistinct(boolean distinct) {
        this.distinct = distinct;
        return this;
    }

    public boolean isDistinct() {
        return distinct;
    }

    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    public ConfigPropertiesExample or(Criteria criteria) {
        oredCriteria.add(criteria);
        return this;
    }

    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria(this);
        criteria.criteria(this);
        return criteria;
    }

    public ConfigPropertiesExample clear() {
        offset = null;
        rows = null;
        this.sumCol = null;
        from = null;
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
        return this;
    }

    public List<ConfigProperties> list(SqlSession sql) {
        return sql.getMapper(ConfigPropertiesMapper.class).selectByExample(this);
    }

    public List<ConfigProperties> list(ConfigPropertiesMapper mapper) {
        return mapper.selectByExample(this);
    }

    public ConfigProperties first(SqlSession sql) {
        List<ConfigProperties> list = sql.getMapper(ConfigPropertiesMapper.class).selectByExample(this);
        return list == null || list.isEmpty() ? null : list.get(0);
    }

    public ConfigProperties first(ConfigPropertiesMapper mapper) {
        List<ConfigProperties> list = mapper.selectByExample(this);
        return list == null || list.isEmpty() ? null : list.get(0);
    }

    public ConfigProperties single(SqlSession sql) {
        List<ConfigProperties> list = sql.getMapper(ConfigPropertiesMapper.class).selectByExample(this);
        return list == null || list.size() != 1 ? null : list.get(0);
    }

    public ConfigProperties single(ConfigPropertiesMapper mapper) {
        List<ConfigProperties> list = mapper.selectByExample(this);
        return list == null || list.size() != 1 ? null : list.get(0);
    }

    public ConfigProperties optional(SqlSession sql) {
        List<ConfigProperties> list = sql.getMapper(ConfigPropertiesMapper.class).selectByExample(this);
        return list == null || list.isEmpty() ? new ConfigProperties() : list.get(0);
    }

    public ConfigProperties optional(ConfigPropertiesMapper mapper) {
        List<ConfigProperties> list = mapper.selectByExample(this);
        return list == null || list.isEmpty() ? new ConfigProperties() : list.get(0);
    }

    public int update(SqlSession sql, ConfigProperties record) {
        return sql.getMapper(ConfigPropertiesMapper.class).updateByExample(record, this);
    }

    public int update(ConfigPropertiesMapper mapper, ConfigProperties record) {
        return mapper.updateByExample(record, this);
    }

    public int updateSelective(SqlSession sql, ConfigProperties record) {
        return sql.getMapper(ConfigPropertiesMapper.class).updateByExampleSelective(record, this);
    }

    public int updateSelective(ConfigPropertiesMapper mapper, ConfigProperties record) {
        return mapper.updateByExampleSelective(record, this);
    }

    public int delete(SqlSession sql) {
        return sql.getMapper(ConfigPropertiesMapper.class).deleteByExample(this);
    }

    public int delete(ConfigPropertiesMapper mapper) {
        return mapper.deleteByExample(this);
    }

    public Long count(SqlSession sql) {
        return sql.getMapper(ConfigPropertiesMapper.class).countByExample(this);
    }

    public Long count(ConfigPropertiesMapper mapper) {
        return mapper.countByExample(this);
    }

    public Criteria current() {
        if (oredCriteria == null || oredCriteria.isEmpty()) return createCriteria();
        return oredCriteria.get(oredCriteria.size() - 1);
    }

    public List<String> getFrom() {
        return from;
    }

    public ConfigPropertiesExample addFromClause(String join) {
        if (join == null || (join = join.trim()).length() == 0) return this;
        if (from == null) from = new ArrayList<String>();
        from.add(join);
        return this;
    }

    /**
     * @param formatString A {@link java.util.Formatter format string} for join expression
     * @param firstArg First argument referenced by the format specifiers in the format string
     * @param secondAndFurtherArgs Second and further arguments referenced by the format specifiers in the format string
     */
    public ConfigPropertiesExample addFromClause(String formatString, Object firstArg, Object ... secondAndFurtherArgs) {
        if (formatString == null || (formatString = formatString.trim()).length() == 0) return this;
        if (from == null) from = new ArrayList<String>();
        Object[] temp = new Object[(secondAndFurtherArgs == null ? 0 : secondAndFurtherArgs.length) + 1];
        if (secondAndFurtherArgs != null) System.arraycopy(secondAndFurtherArgs, 0, temp, 1, secondAndFurtherArgs.length);
        temp[0] = firstArg;
        String formatted = String.format(formatString, temp);
        from.add(formatted);
        return this;
    }

    public String getSumCol() {
        return this.sumCol;
    }

    public void setSumCol(String sumCol) {
        this.sumCol = sumCol;
    }

    public ConfigPropertiesExample sumId() {
        this.sumCol="id";
        return this;
    }

    public ConfigPropertiesExample sumKey1() {
        this.sumCol="key1";
        return this;
    }

    public ConfigPropertiesExample sumValue1() {
        this.sumCol="value1";
        return this;
    }

    public ConfigPropertiesExample sumApplication() {
        this.sumCol="application";
        return this;
    }

    public ConfigPropertiesExample sumProfile() {
        this.sumCol="profile";
        return this;
    }

    public ConfigPropertiesExample sumLabel() {
        this.sumCol="label";
        return this;
    }

    public ConfigPropertiesExample sumEditable() {
        this.sumCol="editable";
        return this;
    }

    public ConfigPropertiesExample sumDesc() {
        this.sumCol="desc";
        return this;
    }

    public ConfigPropertiesExample sumUnit() {
        this.sumCol="unit";
        return this;
    }

    public void setOffset(Integer offset) {
        this.offset = offset;
    }

    public Integer getOffset() {
        return offset;
    }

    public void setRows(Integer rows) {
        this.rows = rows;
    }

    public Integer getRows() {
        return rows;
    }

    public ConfigPropertiesExample limit(Integer rows) {
        this.rows = rows;
        return this;
    }

    public ConfigPropertiesExample limit(Integer offset, Integer rows) {
        this.offset = offset;
        this.rows = rows;
        return this;
    }

    public ConfigPropertiesExample page(Integer page, Integer pageSize) {
        this.offset = page * pageSize;
        this.rows = pageSize;
        return this;
    }

    public ConfigPropertiesExample orderBy(String orderByClause) {
        this.setOrderByClause(orderByClause);
        return this;
    }

    public ConfigPropertiesExample orderBy(String ... orderByClauses) {
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < orderByClauses.length; i++) {
            sb.append(orderByClauses[i]);
            if (i < orderByClauses.length - 1) {
                sb.append(" , ");
            }
        }
        this.setOrderByClause(sb.toString());
        return this;
    }

    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andIdIsNull() {
            addCriterion("config_properties.id is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("config_properties.id is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(Long value) {
            addCriterion("config_properties.id =", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(Long value) {
            addCriterion("config_properties.id <>", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(Long value) {
            addCriterion("config_properties.id >", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Long value) {
            addCriterion("config_properties.id >=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThan(Long value) {
            addCriterion("config_properties.id <", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(Long value) {
            addCriterion("config_properties.id <=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdIn(List<Long> values) {
            if (values == null || values.isEmpty()) {addCriterion("1=2 /* andIdIn */");return (Criteria) this;}
            addCriterion("config_properties.id in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<Long> values) {
            if (values == null || values.isEmpty()) {addCriterion("1=1 /* andIdNotIn */");return (Criteria) this;}
            addCriterion("config_properties.id not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(Long value1, Long value2) {
            addCriterion("config_properties.id between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(Long value1, Long value2) {
            addCriterion("config_properties.id not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andKey1IsNull() {
            addCriterion("config_properties.key1 is null");
            return (Criteria) this;
        }

        public Criteria andKey1IsNotNull() {
            addCriterion("config_properties.key1 is not null");
            return (Criteria) this;
        }

        public Criteria andKey1EqualTo(String value) {
            addCriterion("config_properties.key1 =", value, "key1");
            return (Criteria) this;
        }

        public Criteria andKey1NotEqualTo(String value) {
            addCriterion("config_properties.key1 <>", value, "key1");
            return (Criteria) this;
        }

        public Criteria andKey1GreaterThan(String value) {
            addCriterion("config_properties.key1 >", value, "key1");
            return (Criteria) this;
        }

        public Criteria andKey1GreaterThanOrEqualTo(String value) {
            addCriterion("config_properties.key1 >=", value, "key1");
            return (Criteria) this;
        }

        public Criteria andKey1LessThan(String value) {
            addCriterion("config_properties.key1 <", value, "key1");
            return (Criteria) this;
        }

        public Criteria andKey1LessThanOrEqualTo(String value) {
            addCriterion("config_properties.key1 <=", value, "key1");
            return (Criteria) this;
        }

        public Criteria andKey1Like(String value) {
            addCriterion("config_properties.key1 like", value, "key1");
            return (Criteria) this;
        }

        public Criteria andKey1NotLike(String value) {
            addCriterion("config_properties.key1 not like", value, "key1");
            return (Criteria) this;
        }

        public Criteria andKey1In(List<String> values) {
            if (values == null || values.isEmpty()) {addCriterion("1=2 /* andKey1In */");return (Criteria) this;}
            addCriterion("config_properties.key1 in", values, "key1");
            return (Criteria) this;
        }

        public Criteria andKey1NotIn(List<String> values) {
            if (values == null || values.isEmpty()) {addCriterion("1=1 /* andKey1NotIn */");return (Criteria) this;}
            addCriterion("config_properties.key1 not in", values, "key1");
            return (Criteria) this;
        }

        public Criteria andKey1Between(String value1, String value2) {
            addCriterion("config_properties.key1 between", value1, value2, "key1");
            return (Criteria) this;
        }

        public Criteria andKey1NotBetween(String value1, String value2) {
            addCriterion("config_properties.key1 not between", value1, value2, "key1");
            return (Criteria) this;
        }

        public Criteria andValue1IsNull() {
            addCriterion("config_properties.value1 is null");
            return (Criteria) this;
        }

        public Criteria andValue1IsNotNull() {
            addCriterion("config_properties.value1 is not null");
            return (Criteria) this;
        }

        public Criteria andValue1EqualTo(String value) {
            addCriterion("config_properties.value1 =", value, "value1");
            return (Criteria) this;
        }

        public Criteria andValue1NotEqualTo(String value) {
            addCriterion("config_properties.value1 <>", value, "value1");
            return (Criteria) this;
        }

        public Criteria andValue1GreaterThan(String value) {
            addCriterion("config_properties.value1 >", value, "value1");
            return (Criteria) this;
        }

        public Criteria andValue1GreaterThanOrEqualTo(String value) {
            addCriterion("config_properties.value1 >=", value, "value1");
            return (Criteria) this;
        }

        public Criteria andValue1LessThan(String value) {
            addCriterion("config_properties.value1 <", value, "value1");
            return (Criteria) this;
        }

        public Criteria andValue1LessThanOrEqualTo(String value) {
            addCriterion("config_properties.value1 <=", value, "value1");
            return (Criteria) this;
        }

        public Criteria andValue1Like(String value) {
            addCriterion("config_properties.value1 like", value, "value1");
            return (Criteria) this;
        }

        public Criteria andValue1NotLike(String value) {
            addCriterion("config_properties.value1 not like", value, "value1");
            return (Criteria) this;
        }

        public Criteria andValue1In(List<String> values) {
            if (values == null || values.isEmpty()) {addCriterion("1=2 /* andValue1In */");return (Criteria) this;}
            addCriterion("config_properties.value1 in", values, "value1");
            return (Criteria) this;
        }

        public Criteria andValue1NotIn(List<String> values) {
            if (values == null || values.isEmpty()) {addCriterion("1=1 /* andValue1NotIn */");return (Criteria) this;}
            addCriterion("config_properties.value1 not in", values, "value1");
            return (Criteria) this;
        }

        public Criteria andValue1Between(String value1, String value2) {
            addCriterion("config_properties.value1 between", value1, value2, "value1");
            return (Criteria) this;
        }

        public Criteria andValue1NotBetween(String value1, String value2) {
            addCriterion("config_properties.value1 not between", value1, value2, "value1");
            return (Criteria) this;
        }

        public Criteria andApplicationIsNull() {
            addCriterion("config_properties.application is null");
            return (Criteria) this;
        }

        public Criteria andApplicationIsNotNull() {
            addCriterion("config_properties.application is not null");
            return (Criteria) this;
        }

        public Criteria andApplicationEqualTo(String value) {
            addCriterion("config_properties.application =", value, "application");
            return (Criteria) this;
        }

        public Criteria andApplicationNotEqualTo(String value) {
            addCriterion("config_properties.application <>", value, "application");
            return (Criteria) this;
        }

        public Criteria andApplicationGreaterThan(String value) {
            addCriterion("config_properties.application >", value, "application");
            return (Criteria) this;
        }

        public Criteria andApplicationGreaterThanOrEqualTo(String value) {
            addCriterion("config_properties.application >=", value, "application");
            return (Criteria) this;
        }

        public Criteria andApplicationLessThan(String value) {
            addCriterion("config_properties.application <", value, "application");
            return (Criteria) this;
        }

        public Criteria andApplicationLessThanOrEqualTo(String value) {
            addCriterion("config_properties.application <=", value, "application");
            return (Criteria) this;
        }

        public Criteria andApplicationLike(String value) {
            addCriterion("config_properties.application like", value, "application");
            return (Criteria) this;
        }

        public Criteria andApplicationNotLike(String value) {
            addCriterion("config_properties.application not like", value, "application");
            return (Criteria) this;
        }

        public Criteria andApplicationIn(List<String> values) {
            if (values == null || values.isEmpty()) {addCriterion("1=2 /* andApplicationIn */");return (Criteria) this;}
            addCriterion("config_properties.application in", values, "application");
            return (Criteria) this;
        }

        public Criteria andApplicationNotIn(List<String> values) {
            if (values == null || values.isEmpty()) {addCriterion("1=1 /* andApplicationNotIn */");return (Criteria) this;}
            addCriterion("config_properties.application not in", values, "application");
            return (Criteria) this;
        }

        public Criteria andApplicationBetween(String value1, String value2) {
            addCriterion("config_properties.application between", value1, value2, "application");
            return (Criteria) this;
        }

        public Criteria andApplicationNotBetween(String value1, String value2) {
            addCriterion("config_properties.application not between", value1, value2, "application");
            return (Criteria) this;
        }

        public Criteria andProfileIsNull() {
            addCriterion("config_properties.profile is null");
            return (Criteria) this;
        }

        public Criteria andProfileIsNotNull() {
            addCriterion("config_properties.profile is not null");
            return (Criteria) this;
        }

        public Criteria andProfileEqualTo(String value) {
            addCriterion("config_properties.profile =", value, "profile");
            return (Criteria) this;
        }

        public Criteria andProfileNotEqualTo(String value) {
            addCriterion("config_properties.profile <>", value, "profile");
            return (Criteria) this;
        }

        public Criteria andProfileGreaterThan(String value) {
            addCriterion("config_properties.profile >", value, "profile");
            return (Criteria) this;
        }

        public Criteria andProfileGreaterThanOrEqualTo(String value) {
            addCriterion("config_properties.profile >=", value, "profile");
            return (Criteria) this;
        }

        public Criteria andProfileLessThan(String value) {
            addCriterion("config_properties.profile <", value, "profile");
            return (Criteria) this;
        }

        public Criteria andProfileLessThanOrEqualTo(String value) {
            addCriterion("config_properties.profile <=", value, "profile");
            return (Criteria) this;
        }

        public Criteria andProfileLike(String value) {
            addCriterion("config_properties.profile like", value, "profile");
            return (Criteria) this;
        }

        public Criteria andProfileNotLike(String value) {
            addCriterion("config_properties.profile not like", value, "profile");
            return (Criteria) this;
        }

        public Criteria andProfileIn(List<String> values) {
            if (values == null || values.isEmpty()) {addCriterion("1=2 /* andProfileIn */");return (Criteria) this;}
            addCriterion("config_properties.profile in", values, "profile");
            return (Criteria) this;
        }

        public Criteria andProfileNotIn(List<String> values) {
            if (values == null || values.isEmpty()) {addCriterion("1=1 /* andProfileNotIn */");return (Criteria) this;}
            addCriterion("config_properties.profile not in", values, "profile");
            return (Criteria) this;
        }

        public Criteria andProfileBetween(String value1, String value2) {
            addCriterion("config_properties.profile between", value1, value2, "profile");
            return (Criteria) this;
        }

        public Criteria andProfileNotBetween(String value1, String value2) {
            addCriterion("config_properties.profile not between", value1, value2, "profile");
            return (Criteria) this;
        }

        public Criteria andLabelIsNull() {
            addCriterion("config_properties.label is null");
            return (Criteria) this;
        }

        public Criteria andLabelIsNotNull() {
            addCriterion("config_properties.label is not null");
            return (Criteria) this;
        }

        public Criteria andLabelEqualTo(String value) {
            addCriterion("config_properties.label =", value, "label");
            return (Criteria) this;
        }

        public Criteria andLabelNotEqualTo(String value) {
            addCriterion("config_properties.label <>", value, "label");
            return (Criteria) this;
        }

        public Criteria andLabelGreaterThan(String value) {
            addCriterion("config_properties.label >", value, "label");
            return (Criteria) this;
        }

        public Criteria andLabelGreaterThanOrEqualTo(String value) {
            addCriterion("config_properties.label >=", value, "label");
            return (Criteria) this;
        }

        public Criteria andLabelLessThan(String value) {
            addCriterion("config_properties.label <", value, "label");
            return (Criteria) this;
        }

        public Criteria andLabelLessThanOrEqualTo(String value) {
            addCriterion("config_properties.label <=", value, "label");
            return (Criteria) this;
        }

        public Criteria andLabelLike(String value) {
            addCriterion("config_properties.label like", value, "label");
            return (Criteria) this;
        }

        public Criteria andLabelNotLike(String value) {
            addCriterion("config_properties.label not like", value, "label");
            return (Criteria) this;
        }

        public Criteria andLabelIn(List<String> values) {
            if (values == null || values.isEmpty()) {addCriterion("1=2 /* andLabelIn */");return (Criteria) this;}
            addCriterion("config_properties.label in", values, "label");
            return (Criteria) this;
        }

        public Criteria andLabelNotIn(List<String> values) {
            if (values == null || values.isEmpty()) {addCriterion("1=1 /* andLabelNotIn */");return (Criteria) this;}
            addCriterion("config_properties.label not in", values, "label");
            return (Criteria) this;
        }

        public Criteria andLabelBetween(String value1, String value2) {
            addCriterion("config_properties.label between", value1, value2, "label");
            return (Criteria) this;
        }

        public Criteria andLabelNotBetween(String value1, String value2) {
            addCriterion("config_properties.label not between", value1, value2, "label");
            return (Criteria) this;
        }

        public Criteria andEditableIsNull() {
            addCriterion("config_properties.editable is null");
            return (Criteria) this;
        }

        public Criteria andEditableIsNotNull() {
            addCriterion("config_properties.editable is not null");
            return (Criteria) this;
        }

        public Criteria andEditableEqualTo(Boolean value) {
            addCriterion("config_properties.editable =", value, "editable");
            return (Criteria) this;
        }

        public Criteria andEditableNotEqualTo(Boolean value) {
            addCriterion("config_properties.editable <>", value, "editable");
            return (Criteria) this;
        }

        public Criteria andEditableGreaterThan(Boolean value) {
            addCriterion("config_properties.editable >", value, "editable");
            return (Criteria) this;
        }

        public Criteria andEditableGreaterThanOrEqualTo(Boolean value) {
            addCriterion("config_properties.editable >=", value, "editable");
            return (Criteria) this;
        }

        public Criteria andEditableLessThan(Boolean value) {
            addCriterion("config_properties.editable <", value, "editable");
            return (Criteria) this;
        }

        public Criteria andEditableLessThanOrEqualTo(Boolean value) {
            addCriterion("config_properties.editable <=", value, "editable");
            return (Criteria) this;
        }

        public Criteria andEditableIn(List<Boolean> values) {
            if (values == null || values.isEmpty()) {addCriterion("1=2 /* andEditableIn */");return (Criteria) this;}
            addCriterion("config_properties.editable in", values, "editable");
            return (Criteria) this;
        }

        public Criteria andEditableNotIn(List<Boolean> values) {
            if (values == null || values.isEmpty()) {addCriterion("1=1 /* andEditableNotIn */");return (Criteria) this;}
            addCriterion("config_properties.editable not in", values, "editable");
            return (Criteria) this;
        }

        public Criteria andEditableBetween(Boolean value1, Boolean value2) {
            addCriterion("config_properties.editable between", value1, value2, "editable");
            return (Criteria) this;
        }

        public Criteria andEditableNotBetween(Boolean value1, Boolean value2) {
            addCriterion("config_properties.editable not between", value1, value2, "editable");
            return (Criteria) this;
        }

        public Criteria andDescIsNull() {
            addCriterion("config_properties.desc is null");
            return (Criteria) this;
        }

        public Criteria andDescIsNotNull() {
            addCriterion("config_properties.desc is not null");
            return (Criteria) this;
        }

        public Criteria andDescEqualTo(String value) {
            addCriterion("config_properties.desc =", value, "desc");
            return (Criteria) this;
        }

        public Criteria andDescNotEqualTo(String value) {
            addCriterion("config_properties.desc <>", value, "desc");
            return (Criteria) this;
        }

        public Criteria andDescGreaterThan(String value) {
            addCriterion("config_properties.desc >", value, "desc");
            return (Criteria) this;
        }

        public Criteria andDescGreaterThanOrEqualTo(String value) {
            addCriterion("config_properties.desc >=", value, "desc");
            return (Criteria) this;
        }

        public Criteria andDescLessThan(String value) {
            addCriterion("config_properties.desc <", value, "desc");
            return (Criteria) this;
        }

        public Criteria andDescLessThanOrEqualTo(String value) {
            addCriterion("config_properties.desc <=", value, "desc");
            return (Criteria) this;
        }

        public Criteria andDescLike(String value) {
            addCriterion("config_properties.desc like", value, "desc");
            return (Criteria) this;
        }

        public Criteria andDescNotLike(String value) {
            addCriterion("config_properties.desc not like", value, "desc");
            return (Criteria) this;
        }

        public Criteria andDescIn(List<String> values) {
            if (values == null || values.isEmpty()) {addCriterion("1=2 /* andDescIn */");return (Criteria) this;}
            addCriterion("config_properties.desc in", values, "desc");
            return (Criteria) this;
        }

        public Criteria andDescNotIn(List<String> values) {
            if (values == null || values.isEmpty()) {addCriterion("1=1 /* andDescNotIn */");return (Criteria) this;}
            addCriterion("config_properties.desc not in", values, "desc");
            return (Criteria) this;
        }

        public Criteria andDescBetween(String value1, String value2) {
            addCriterion("config_properties.desc between", value1, value2, "desc");
            return (Criteria) this;
        }

        public Criteria andDescNotBetween(String value1, String value2) {
            addCriterion("config_properties.desc not between", value1, value2, "desc");
            return (Criteria) this;
        }

        public Criteria andUnitIsNull() {
            addCriterion("config_properties.unit is null");
            return (Criteria) this;
        }

        public Criteria andUnitIsNotNull() {
            addCriterion("config_properties.unit is not null");
            return (Criteria) this;
        }

        public Criteria andUnitEqualTo(String value) {
            addCriterion("config_properties.unit =", value, "unit");
            return (Criteria) this;
        }

        public Criteria andUnitNotEqualTo(String value) {
            addCriterion("config_properties.unit <>", value, "unit");
            return (Criteria) this;
        }

        public Criteria andUnitGreaterThan(String value) {
            addCriterion("config_properties.unit >", value, "unit");
            return (Criteria) this;
        }

        public Criteria andUnitGreaterThanOrEqualTo(String value) {
            addCriterion("config_properties.unit >=", value, "unit");
            return (Criteria) this;
        }

        public Criteria andUnitLessThan(String value) {
            addCriterion("config_properties.unit <", value, "unit");
            return (Criteria) this;
        }

        public Criteria andUnitLessThanOrEqualTo(String value) {
            addCriterion("config_properties.unit <=", value, "unit");
            return (Criteria) this;
        }

        public Criteria andUnitLike(String value) {
            addCriterion("config_properties.unit like", value, "unit");
            return (Criteria) this;
        }

        public Criteria andUnitNotLike(String value) {
            addCriterion("config_properties.unit not like", value, "unit");
            return (Criteria) this;
        }

        public Criteria andUnitIn(List<String> values) {
            if (values == null || values.isEmpty()) {addCriterion("1=2 /* andUnitIn */");return (Criteria) this;}
            addCriterion("config_properties.unit in", values, "unit");
            return (Criteria) this;
        }

        public Criteria andUnitNotIn(List<String> values) {
            if (values == null || values.isEmpty()) {addCriterion("1=1 /* andUnitNotIn */");return (Criteria) this;}
            addCriterion("config_properties.unit not in", values, "unit");
            return (Criteria) this;
        }

        public Criteria andUnitBetween(String value1, String value2) {
            addCriterion("config_properties.unit between", value1, value2, "unit");
            return (Criteria) this;
        }

        public Criteria andUnitNotBetween(String value1, String value2) {
            addCriterion("config_properties.unit not between", value1, value2, "unit");
            return (Criteria) this;
        }

        public Criteria andEqualTo(String field, Object value) {
            if (value == null) return andIsNull(field);
            if (value instanceof java.util.Date) value = new java.sql.Date(((java.util.Date)value).getTime());
            addCriterion(field+" = ", value, field);
            return (Criteria)this;
        }

        public Criteria andNotEqualTo(String field, Object value) {
            if (value == null) return andIsNotNull(field);
            if (value instanceof java.util.Date) value = new java.sql.Date(((java.util.Date)value).getTime());
            addCriterion(field+" <> ", value, field);
            return (Criteria)this;
        }

        public Criteria andIsNull(String field) {
            addCriterion(field+" is null");
            return (Criteria)this;
        }

        public Criteria andIsNotNull(String field) {
            addCriterion(field+" is not null");
            return (Criteria)this;
        }

        public Criteria and(String condition) {
            addCriterion(condition);
            return (Criteria)this;
        }

        private List<Long> arrayOfIntToListOfLong(int[] values) {
            List<Long> list = new ArrayList<Long>();
            if (values != null) for (int i : values) list.add((long)i);
            return list;
        }

        private List<Long> arrayOfLongToListOfLong(long[] values) {
            List<Long> list = new ArrayList<Long>();
            if (values != null) for (long i : values) list.add(i);
            return list;
        }

        private List<Long> arrayOfNumberToListOfLong(Number[] values) {
            List<Long> list = new ArrayList<Long>();
            if (values != null) for (Number i : values) if (i != null) list.add(i.longValue());
            return list;
        }

        private List<Long> setOfNumberToListOfLong(Set<? extends Number> values) {
            List<Long> list = new ArrayList<Long>();
            if (values != null) for (Number i : values) if (i != null) list.add(i.longValue());
            return list;
        }

        public Criteria andIdIn(int[] values) {
            if (values == null || values.length == 0) {addCriterion("1=2 /* andIdIn */");return andIdIn(arrayOfIntToListOfLong(values));}
            return andIdIn(arrayOfIntToListOfLong(values));
        }

        public Criteria andIdIn(long[] values) {
            if (values == null || values.length == 0) {addCriterion("1=2 /* andIdIn */");return andIdIn(arrayOfLongToListOfLong(values));}
            return andIdIn(arrayOfLongToListOfLong(values));
        }

        public Criteria andIdIn(Number[] values) {
            if (values == null || values.length == 0) {addCriterion("1=2 /* andIdIn */");return andIdIn(arrayOfNumberToListOfLong(values));}
            return andIdIn(arrayOfNumberToListOfLong(values));
        }

        public Criteria andIdIn(Set<? extends Number> values) {
            if (values == null || values.isEmpty()) {addCriterion("1=2 /* andIdIn */");return andIdIn(setOfNumberToListOfLong(values));}
            return andIdIn(setOfNumberToListOfLong(values));
        }

        public Criteria andIdNotIn(int[] values) {
            if (values == null || values.length == 0) {addCriterion("1=1 /* andIdNotIn */");return andIdNotIn(arrayOfIntToListOfLong(values));}
            return andIdNotIn(arrayOfIntToListOfLong(values));
        }

        public Criteria andIdNotIn(long[] values) {
            if (values == null || values.length == 0) {addCriterion("1=1 /* andIdNotIn */");return andIdNotIn(arrayOfLongToListOfLong(values));}
            return andIdNotIn(arrayOfLongToListOfLong(values));
        }

        public Criteria andIdNotIn(Number[] values) {
            if (values == null || values.length == 0) {addCriterion("1=1 /* andIdNotIn */");return andIdNotIn(arrayOfNumberToListOfLong(values));}
            return andIdNotIn(arrayOfNumberToListOfLong(values));
        }

        public Criteria andIdNotIn(Set<? extends Number> values) {
            if (values == null || values.isEmpty()) {addCriterion("1=1 /* andIdNotIn */");return andIdNotIn(setOfNumberToListOfLong(values));}
            return andIdNotIn(setOfNumberToListOfLong(values));
        }

        public Criteria andIf(String field, String operator, Object value) {
            return andIf(field, operator, value, null, null);
        }

        public Criteria andIf(String field, String operator, Object value, String beforeValue, String afterValue) {
            if (field == null || field.trim().length() == 0) { field = "null"; }
            if (operator == null) { addCriterion("1=2 /* "+field.replaceAll("[^0-9A-Za-z param.()]","")+".operator */ "); return (Criteria)this; }
            if (value == null) { addCriterion("1=2 /* "+field.replaceAll("[^0-9A-Za-z param.()]","")+".value */ "); return (Criteria)this; }
            if (value instanceof java.util.Date) value = new java.sql.Date(((java.util.Date)value).getTime());
            String condition = field + " "+operator+" ";
            Criterion c = new Criterion(condition, value);
            if (beforeValue != null) c.beforeValue = beforeValue;
            if (afterValue != null) c.afterValue = afterValue;
            criteria.add(c);
            return (Criteria)this;
        }

        public Criteria andRightIf(Object value, String operator, String field) {
            return andRightIf(value, operator, field, null, null);
        }

        public Criteria andRightIf(Object value, String operator, String field, String beforeValue, String afterValue) {
            if (field == null || field.trim().length() == 0) { field = "null"; }
            if (operator == null) { addCriterion("1=2 /* "+field.replaceAll("[^0-9A-Za-z param.()]","")+".operator */ "); return (Criteria)this; }
            if (value == null) { addCriterion("1=2 /* "+field.replaceAll("[^0-9A-Za-z param.()]","")+".value */ "); return (Criteria)this; }
            if (value instanceof java.util.Date) value = new java.sql.Date(((java.util.Date)value).getTime());
            String condition = " "+operator+" "+field;
            Criterion c = new Criterion(condition, value);
            if (beforeValue != null) c.beforeValue = beforeValue;
            if (afterValue != null) c.afterValue = afterValue;
            c.rightValue = true;
            criteria.add(c);
            return (Criteria)this;
        }

        public Criteria addConditionSql(String conditionSql) {
            addCriterion(conditionSql);
            return (Criteria) this;
        }
    }

    public static class Criteria extends GeneratedCriteria {
        private ConfigPropertiesExample _owner;

        private Criteria _parent;

        private ConfigPropertiesExample example;

        protected Criteria(ConfigPropertiesExample example) {
            super();
            this.example = example;
        }

        public ConfigPropertiesExample criteria() {
            return _owner;
        }

        private void criteria(ConfigPropertiesExample owner) {
            this._owner = owner;
        }

        public Criteria andOr() {
            Criteria c = _owner.createCriteriaInternal();
            c._parent = this;
            criteria.add(new Criterion(c));
            return c;
        }

        public Criteria endOr() {
            return _parent != null ? _parent : this;
        }

        public ConfigPropertiesExample example() {
            return this.example;
        }

        public Criteria andIf(boolean ifAdd, ICriteriaAdd add) {
            if (ifAdd) {
                add.add(this);
            }
            return this;
        }

        public interface ICriteriaAdd {
            Criteria add(Criteria add);
        }
    }

    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        private String afterValue = "";

        private String beforeValue = "";

        private boolean rightValue;

        private Criteria sub;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }

        public String getAfterValue() {
            return afterValue;
        }

        public String getBeforeValue() {
            return beforeValue;
        }

        public boolean isRightValue() {
            return rightValue;
        }

        protected Criterion(Criteria sub) {
            super();
            this.sub = sub;
        }

        public Criteria getSubCriteria() {
            return sub;
        }

        public boolean isComplex() {
            return sub != null;
        }
    }
}